public class MedianFinder {

    MinHeap minHeap = new MinHeap();    //Keep track of right(2nd half) of the elements
    MaxHeap maxHeap = new MaxHeap();    //Keep track of left (1st half) of the elements
    public void AddNum(int num)
    {
        if (minHeap.Size() == 0)
        {
            minHeap.HeapInsert(num);
        }
        else
        {
            if (num > minHeap.Minimum())
                minHeap.HeapInsert(num);
            else
                maxHeap.HeapInsert(num);
        }

        //Now rebalance two heaps
        if (minHeap.Size() > maxHeap.Size()+1)
        {
            maxHeap.HeapInsert(minHeap.HeapExtractMin());
        }
        else if (maxHeap.Size() > minHeap.Size())
        {
            minHeap.HeapInsert(maxHeap.HeapExtractMax());
        }
    }

    public double FindMedian()
    {
        if (minHeap.Size() == 0)
            return 0;
        else if (minHeap.Size() == maxHeap.Size())
            return (minHeap.Minimum() + maxHeap.Maximum()) / 2d;
        else
            return minHeap.Minimum();
    }

}


public class MinHeap
{
    public List<int> heapData;   //Array List to store data to maintain heap data structure

    public MinHeap()
    {
        heapData = new List<int>();
    }

    //This subroutine builds the MinHeap at position i. It is assumed that left child and right child of i are proper heaps
    public void Heapify(int i)
    {
        int left = i * 2 + 1;
        int right = i * 2 + 2;
        int len = heapData.Count;
        int smaller;
        if (left < len && heapData[left] < heapData[i])
            smaller = left;
        else
            smaller = i;
        if (right < len && heapData[right] < heapData[smaller])
            smaller = right;

        if (smaller != i)
        {
            //exchange heapData[i] and heapData[smaller]
            int tmp = heapData[i];
            heapData[i] = heapData[smaller];
            heapData[smaller] = tmp;

            //do Heapify on smaller element
            Heapify(smaller);
        }
    }

    //This subroutine removes the minimum element from heapData and returns it
    public int HeapExtractMin()
    {
        if (heapData.Count < 1)
            throw new Exception("Heap underflow error");
        int len = heapData.Count;

        int min = heapData[0];
        heapData[0] = heapData[len - 1];
        heapData.RemoveAt(len - 1);
        Heapify(0);
        return min;
    }

    //This subroutine inserts an element to heap
    public void HeapInsert(int key)
    {
        heapData.Add(key);
        int i = heapData.Count-1;
        while(i >0 && heapData[(i-1)/2] > heapData[i])
        {
            //exchange heapData[(i-1)/2] and heapData[i]
            int tmp = heapData[i];
            heapData[i] = heapData[(i - 1) / 2];
            heapData[(i - 1) / 2] = tmp;
            i = (i - 1) / 2;
        }
    }

    //Retrns min element of the heap
    public int Minimum()
    {
        return heapData[0];
    }

    public int Size()
    {
        return heapData.Count;
    }
}

public class MaxHeap
{
    public List<int> heapData;   //Array List to store data to maintain heap data structure

    public MaxHeap()
    {
        heapData = new List<int>();
    }

    //This subroutine builds the MaxHeap at position i. It is assumed that left child and right child of i are proper heaps
    public void Heapify(int i)
    {
        int left = i * 2 + 1;
        int right = i * 2 + 2;
        int len = heapData.Count;
        int larger;
        if (left < len && heapData[left] > heapData[i])
            larger = left;
        else
            larger = i;
        if (right < len && heapData[right] > heapData[larger])
            larger = right;

        if (larger != i)
        {
            //exchange heapData[i] and heapData[larger]
            int tmp = heapData[i];
            heapData[i] = heapData[larger];
            heapData[larger] = tmp;

            //do Heapify on larger element
            Heapify(larger);
        }
    }

    //This subroutine removes the maximum element from heapData and returns it
    public int HeapExtractMax()
    {
        if (heapData.Count < 1)
            throw new Exception("Heap underflow error");
        int len = heapData.Count;

        int max = heapData[0];
        heapData[0] = heapData[len - 1];
        heapData.RemoveAt(len - 1);
        Heapify(0);
        return max;
    }

    //This subroutine inserts an element to heap
    public void HeapInsert(int key)
    {
        heapData.Add(key);
        int i = heapData.Count-1;
        while(i >0 && heapData[(i-1)/2] < heapData[i])
        {
            //exchange heapData[(i-1)/2] and heapData[i]
            int tmp = heapData[i];
            heapData[i] = heapData[(i - 1) / 2];
            heapData[(i - 1) / 2] = tmp;
            i = (i-1) / 2;
        }
    }

    //Retrns max element of the heap
    public int Maximum()
    {
        return heapData[0];
    }

    public int Size()
    {
        return heapData.Count;
    }
}
