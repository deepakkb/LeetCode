public class MedianFinder
{
    BinaryMaxHeap3 maxHeap = new BinaryMaxHeap3();        //To find max of smaller half elements
    BinaryMinHeap3 minHeap = new BinaryMinHeap3();      //To find min of larger half elements

    // Adds a num into the data structure.
    //If there is a new element, check if it is larger than all elements of minheap then add it to minheap (2nd half)
    //Otherwise add the element to maxheap (1st half).
    //Now balanace minheap and maxHeap to have a size difference of maximum by ONE
    public void AddNum(double num)
    {
        if (minHeap.Length() ==0)
        {
            minHeap.Insert((int)num);

        }
        else
        {
            if (num >= minHeap.Top().Data)
            {
                minHeap.Insert((int)num);
            }
            else
            {
                maxHeap.Insert((int)num);
            }
        }

        //Now rebalance the two heaps
        if (minHeap.Length() > (maxHeap.Length() +1))
        {
            maxHeap.Insert(minHeap.Remove().Data);
        }
        else if (maxHeap.Length() > minHeap.Length())
        {
            minHeap.Insert(maxHeap.Remove().Data);
        }
    }

    // return the median of current data stream
    public double FindMedian()
    {
        if (minHeap.Length() == 0)
            return 0;
        if (minHeap.Length() == maxHeap.Length())
            return (minHeap.Top().Data + maxHeap.Top().Data) / 2d;
        else
            return minHeap.Top().Data;
    }
}
    
    public class BinaryMaxHeap3
    {
        private List<HeapData2> heapData;

        public BinaryMaxHeap3()
        {
            heapData = new List<HeapData2>();
        }

        public int Length()
        {
            return (this.heapData.Count);
        }

        //Shifts the elements up till the element reaches correct position, done after new element is added at end of list
        private void ShiftUp(int nodeIndex)
        {
            int parentIndex = (nodeIndex - 1) / 2;
            if (parentIndex < 0)
                return;
            if (heapData[parentIndex].Data < heapData[nodeIndex].Data)
            {
                //exchange data[parentIndex] and data[nodeIndex];
                HeapData2 tmp = heapData[parentIndex];
                heapData[parentIndex] = heapData[nodeIndex];
                heapData[nodeIndex] = tmp;
                ShiftUp(parentIndex);
            }
        }
        //Shift the element down till the element reaches correct position, after an element is removed from 0th position of list
        private void ShiftDown(int nodeIndex)
        {
            int leftChildIndex = nodeIndex * 2 + 1;
            int rightChildIndex = nodeIndex * 2 + 2;
            int maxIndex;
            if (leftChildIndex < heapData.Count && heapData[leftChildIndex].Data > heapData[nodeIndex].Data)
                maxIndex = leftChildIndex;
            else
                maxIndex = nodeIndex;
            if (rightChildIndex < heapData.Count && heapData[rightChildIndex].Data > heapData[nodeIndex].Data)
                maxIndex = rightChildIndex;

            if (maxIndex != nodeIndex)
            {
                HeapData2 tmp = heapData[maxIndex];
                heapData[maxIndex] = heapData[nodeIndex];
                heapData[nodeIndex] = tmp;
                ShiftDown(maxIndex);
            }
        }


        //Always insert at the last position and keep shifting up till everyone is at correct position.
        public void Insert(int n)
        {
            heapData.Add(new HeapData2(n));
            ShiftUp(heapData.Count - 1);
        }

        //Remove the element at 0th position and keep shifting down till everyone is at correct position
        public HeapData2 Remove()
        {
            HeapData2 tmp = heapData[0];
            heapData.RemoveAt(0);
            ShiftDown(0);
            return tmp; ;
        }

        public HeapData2 Top()
        {
            return heapData[0];
        }
    }
    
    public class BinaryMinHeap3
    {
        private List<HeapData2> heapData;

        public BinaryMinHeap3()
        {
            heapData = new List<HeapData2>();
        }

        public int Length()
        {
            return (this.heapData.Count);
        }

        //Shifts the elements up till the element reaches correct position
        private void ShiftUp(int nodeIndex)
        {
            int parentIndex = (nodeIndex - 1) / 2;
            if (parentIndex < 0)
                return;
            if (heapData[parentIndex].Data > heapData[nodeIndex].Data)
            {
                //exchange data[parentIndex] and data[nodeIndex];
                HeapData2 tmp = heapData[parentIndex];
                heapData[parentIndex] = heapData[nodeIndex];
                heapData[nodeIndex] = tmp;
                ShiftUp(parentIndex);
            }
        }
        //Shift the element down till the element reaches correct position
        private void ShiftDown(int nodeIndex)
        {
            int leftChildIndex = nodeIndex * 2 + 1;
            int rightChildIndex = nodeIndex * 2 + 2;
            int minIndex;
            if (leftChildIndex < heapData.Count && heapData[leftChildIndex].Data < heapData[nodeIndex].Data)
                minIndex = leftChildIndex;
            else
                minIndex = nodeIndex;
            if (rightChildIndex < heapData.Count && heapData[rightChildIndex].Data < heapData[nodeIndex].Data)
                minIndex = rightChildIndex;

            if (minIndex != nodeIndex)
            {
                HeapData2 tmp = heapData[minIndex];
                heapData[minIndex] = heapData[nodeIndex];
                heapData[nodeIndex] = tmp;
                ShiftDown(minIndex);
            }
        }


        //Always insert at the last position and keep shifting up till everyone is at correct position.
        public void Insert(int n)
        {
            heapData.Add(new HeapData2(n));
            ShiftUp(heapData.Count - 1);
        }

        //Remove the element at 0th position and keep shifting down till everyone is at correct position
        public HeapData2 Remove()
        {
            HeapData2 tmp = heapData[0];
            heapData.RemoveAt(0);
            ShiftDown(0);
            return tmp; ;
        }

        public HeapData2 Top()
        {
            return heapData[0];
        }
    }
